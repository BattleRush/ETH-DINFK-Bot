// <auto-generated />
using System;
using ETHBot.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ETHBot.DataLayer.Migrations
{
    [DbContext(typeof(ETHBotDBContext))]
    partial class ETHBotDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ETHBot.DataLayer.Data.BotChannelSetting", b =>
                {
                    b.Property<int>("BotChannelSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChannelPermissionFlags")
                        .HasColumnType("int");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTimeOffset?>("NewestPostTimePreloaded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("OldestPostTimePreloaded")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ReachedOldestPreload")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BotChannelSettingId");

                    b.HasIndex("DiscordChannelId");

                    b.ToTable("BotChannelSettings");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.BotSetting", b =>
                {
                    b.Property<int>("BotSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ChannelOrderLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastSpaceXRedditPost")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<short>("PlaceLastChunkId")
                        .HasColumnType("smallint");

                    b.Property<bool>("PlaceLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PlacePixelIdLastChunked")
                        .HasColumnType("int");

                    b.Property<string>("SpaceXSubredditCheckCronJob")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BotSettingId");

                    b.ToTable("BotSetting");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.BotStartUpTime", b =>
                {
                    b.Property<int>("BotStartUpTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("StartUpTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BotStartUpTimeId");

                    b.ToTable("BotStartUpTimes");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.BannedLink", b =>
                {
                    b.Property<int>("BannedLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("AddedByDiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Link")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTimeOffset>("ReportTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BannedLinkId");

                    b.HasIndex("AddedByDiscordUserId");

                    b.ToTable("BannedLinks");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.CommandStatistic", b =>
                {
                    b.Property<int>("CommandStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommandTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("CommandStatisticId");

                    b.HasIndex("CommandTypeId");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("CommandStatistics");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.CommandType", b =>
                {
                    b.Property<int>("CommandTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CommandTypeId");

                    b.ToTable("CommandTypes");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordChannel", b =>
                {
                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("ChannelName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ulong>("DiscordServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsCategory")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("ParentDiscordChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("DiscordChannelId");

                    b.HasIndex("DiscordServerId");

                    b.HasIndex("ParentDiscordChannelId");

                    b.ToTable("DiscordChannels");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordEmote", b =>
                {
                    b.Property<ulong>("DiscordEmoteId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("Animated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Blocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmoteName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LocalPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DiscordEmoteId");

                    b.ToTable("DiscordEmotes");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordEmoteHistory", b =>
                {
                    b.Property<int>("DiscordEmoteHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong>("DiscordEmoteId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("DiscordMessageId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsReaction")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("DiscordEmoteHistoryId");

                    b.HasIndex("DiscordEmoteId");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("DiscordEmoteHistory");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordEmoteStatistic", b =>
                {
                    b.Property<ulong>("DiscordEmoteId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("UsedAsReaction")
                        .HasColumnType("int");

                    b.Property<int>("UsedByBots")
                        .HasColumnType("int");

                    b.Property<int>("UsedInText")
                        .HasColumnType("int");

                    b.Property<int>("UsedInTextOnce")
                        .HasColumnType("int");

                    b.HasKey("DiscordEmoteId");

                    b.ToTable("DiscordEmoteStatistics");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordMessage", b =>
                {
                    b.Property<ulong>("DiscordMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("DiscordThreadId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("Preloaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("ReplyMessageId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("DiscordMessageId");

                    b.HasIndex("DiscordChannelId");

                    b.HasIndex("DiscordThreadId");

                    b.HasIndex("DiscordUserId");

                    b.HasIndex("ReplyMessageId");

                    b.ToTable("DiscordMessages");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordRole", b =>
                {
                    b.Property<ulong>("DiscordRoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("ColorHex")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong?>("DiscordServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsHoisted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsManaged")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMentionable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("DiscordRoleId");

                    b.HasIndex("DiscordServerId");

                    b.ToTable("DiscordRoles");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordServer", b =>
                {
                    b.Property<ulong>("DiscordServerId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("ServerName")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.HasKey("DiscordServerId");

                    b.ToTable("DiscordServers");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordThread", b =>
                {
                    b.Property<ulong>("DiscordThreadId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNsfw")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivateThread")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int");

                    b.Property<string>("ThreadName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ThreadType")
                        .HasColumnType("int");

                    b.HasKey("DiscordThreadId");

                    b.HasIndex("DiscordChannelId");

                    b.ToTable("DiscordThreads");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordUser", b =>
                {
                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("AllowedPlaceMultipixel")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<ushort>("DiscriminatorValue")
                        .HasColumnType("smallint unsigned");

                    b.Property<int>("FirstAfternoonPostCount")
                        .HasColumnType("int");

                    b.Property<int>("FirstDailyPostCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsBot")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWebhook")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("JoinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("DiscordUserId");

                    b.ToTable("DiscordUsers");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.PingHistory", b =>
                {
                    b.Property<int>("PingHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong?>("DiscordMessageId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("DiscordRoleId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("FromDiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsReply")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PingHistoryId");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("DiscordRoleId");

                    b.HasIndex("DiscordUserId");

                    b.HasIndex("FromDiscordUserId");

                    b.ToTable("PingHistory");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.PingStatistic", b =>
                {
                    b.Property<int>("PingInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("PingCount")
                        .HasColumnType("int");

                    b.Property<int>("PingCountBot")
                        .HasColumnType("int");

                    b.Property<int>("PingCountOnce")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCountBot")
                        .HasColumnType("int");

                    b.HasKey("PingInfoId");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("PingStatistics");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.RantMessage", b =>
                {
                    b.Property<int>("RantMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<ulong>("DiscordChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("DiscordMessageId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("RantTypeId")
                        .HasColumnType("int");

                    b.HasKey("RantMessageId");

                    b.HasIndex("DiscordChannelId");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("DiscordUserId");

                    b.HasIndex("RantTypeId");

                    b.ToTable("RantMessages");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.RantType", b =>
                {
                    b.Property<int>("RantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RantTypeId");

                    b.ToTable("RantTypes");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.SavedMessage", b =>
                {
                    b.Property<int>("SavedMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<ulong>("ByDiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Content")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<ulong?>("DMDiscordMessageId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("DeletedFromDM")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DirectLink")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<ulong?>("DiscordMessageId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("SavedByDiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("TriggeredByCommand")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SavedMessageId");

                    b.HasIndex("ByDiscordUserId");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("SavedByDiscordUserId");

                    b.ToTable("SavedMessages");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.FavouriteDiscordEmote", b =>
                {
                    b.Property<ulong>("DiscordEmoteId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(0);

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("DiscordEmoteId", "DiscordUserId");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("FavouriteDiscordEmotes");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlaceBoardHistory", b =>
                {
                    b.Property<int>("PlaceBoardHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte>("B")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("G")
                        .HasColumnType("tinyint unsigned");

                    b.Property<short>("PlaceDiscordUserId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("PlacedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("R")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)");

                    b.Property<short>("XPos")
                        .HasColumnType("smallint");

                    b.Property<short>("YPos")
                        .HasColumnType("smallint");

                    b.HasKey("PlaceBoardHistoryId");

                    b.HasIndex("PlaceDiscordUserId");

                    b.HasIndex("XPos", "YPos");

                    b.ToTable("PlaceBoardHistory");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlaceBoardPixel", b =>
                {
                    b.Property<short>("XPos")
                        .HasColumnType("smallint")
                        .HasColumnOrder(0);

                    b.Property<short>("YPos")
                        .HasColumnType("smallint")
                        .HasColumnOrder(1);

                    b.Property<byte>("B")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("G")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("R")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("XPos", "YPos");

                    b.ToTable("PlaceBoardPixels");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlaceDiscordUser", b =>
                {
                    b.Property<short>("PlaceDiscordUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    b.Property<ulong>("DiscordUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("TotalPixelsPlaced")
                        .HasColumnType("int");

                    b.HasKey("PlaceDiscordUserId");

                    b.HasIndex("DiscordUserId")
                        .IsUnique();

                    b.ToTable("PlaceDiscordUsers");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlaceMultipixelJob", b =>
                {
                    b.Property<int>("PlaceMultipixelJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("PlaceDiscordUserId")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalPixels")
                        .HasColumnType("int");

                    b.HasKey("PlaceMultipixelJobId");

                    b.HasIndex("PlaceDiscordUserId");

                    b.ToTable("PlaceMultipixelJobs");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlaceMultipixelPacket", b =>
                {
                    b.Property<int>("PlaceMultipixelPacketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Done")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("InstructionCount")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .HasColumnType("longtext");

                    b.Property<int>("PlaceMultipixelJobId")
                        .HasColumnType("int");

                    b.HasKey("PlaceMultipixelPacketId");

                    b.HasIndex("PlaceMultipixelJobId");

                    b.ToTable("PlaceMultipixelPackets");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlacePerformanceInfo", b =>
                {
                    b.Property<int>("PlacePerformanceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvgTimeInMs")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FailedCount")
                        .HasColumnType("int");

                    b.Property<int>("SuccessCount")
                        .HasColumnType("int");

                    b.HasKey("PlacePerformanceHistoryId");

                    b.ToTable("PlacePerformanceInfos");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.RedditImage", b =>
                {
                    b.Property<int>("RedditImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Downloaded")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBlockedManually")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("LocalPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RedditPostId")
                        .HasColumnType("int");

                    b.HasKey("RedditImageId");

                    b.HasIndex("RedditPostId");

                    b.ToTable("RedditImages");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.RedditPost", b =>
                {
                    b.Property<int>("RedditPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<int>("DownvoteCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsText")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Permalink")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostTitle")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SubredditInfoId")
                        .HasColumnType("int");

                    b.Property<int>("UpvoteCount")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("RedditPostId");

                    b.HasIndex("SubredditInfoId");

                    b.ToTable("RedditPosts");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.SubredditInfo", b =>
                {
                    b.Property<int>("SubredditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsManuallyBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsNSFW")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsScraping")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NewestPost")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("NewestPostDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OldestPost")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("OldestPostDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ReachedOldest")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SubredditDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubredditName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SubredditId");

                    b.ToTable("SubredditInfos");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.StoredKeyValuePair", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Key");

                    b.ToTable("StoredKeyValuePairs");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.BotChannelSetting", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordChannel", "DiscordChannel")
                        .WithMany()
                        .HasForeignKey("DiscordChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordChannel");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.BannedLink", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "AddedByDiscordUser")
                        .WithMany()
                        .HasForeignKey("AddedByDiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedByDiscordUser");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.CommandStatistic", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.CommandType", "Type")
                        .WithMany()
                        .HasForeignKey("CommandTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordUser");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordChannel", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordServer", "DiscordServer")
                        .WithMany()
                        .HasForeignKey("DiscordServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordChannel", "ParentDiscordChannel")
                        .WithMany()
                        .HasForeignKey("ParentDiscordChannelId");

                    b.Navigation("DiscordServer");

                    b.Navigation("ParentDiscordChannel");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordEmoteHistory", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordEmote", "DiscordEmote")
                        .WithMany()
                        .HasForeignKey("DiscordEmoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId");

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId");

                    b.Navigation("DiscordEmote");

                    b.Navigation("DiscordMessage");

                    b.Navigation("DiscordUser");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordEmoteStatistic", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordEmote", "DiscordEmote")
                        .WithMany()
                        .HasForeignKey("DiscordEmoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordEmote");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordMessage", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordChannel", "DiscordChannel")
                        .WithMany()
                        .HasForeignKey("DiscordChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordThread", "DiscordThread")
                        .WithMany()
                        .HasForeignKey("DiscordThreadId");

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordMessage", "ReplyMessage")
                        .WithMany()
                        .HasForeignKey("ReplyMessageId");

                    b.Navigation("DiscordChannel");

                    b.Navigation("DiscordThread");

                    b.Navigation("DiscordUser");

                    b.Navigation("ReplyMessage");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordRole", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordServer", "DiscordServer")
                        .WithMany()
                        .HasForeignKey("DiscordServerId");

                    b.Navigation("DiscordServer");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.DiscordThread", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordChannel", "DiscordChannel")
                        .WithMany()
                        .HasForeignKey("DiscordChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordChannel");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.PingHistory", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId");

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordRole", "DiscordRole")
                        .WithMany()
                        .HasForeignKey("DiscordRoleId");

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId");

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "FromDiscordUser")
                        .WithMany()
                        .HasForeignKey("FromDiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordMessage");

                    b.Navigation("DiscordRole");

                    b.Navigation("DiscordUser");

                    b.Navigation("FromDiscordUser");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.PingStatistic", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordUser");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.RantMessage", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("DiscordChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.RantType", "RantType")
                        .WithMany()
                        .HasForeignKey("RantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("DiscordMessage");

                    b.Navigation("DiscordUser");

                    b.Navigation("RantType");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Discord.SavedMessage", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "ByDiscordUser")
                        .WithMany()
                        .HasForeignKey("ByDiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId");

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "SavedByDiscordUser")
                        .WithMany()
                        .HasForeignKey("SavedByDiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ByDiscordUser");

                    b.Navigation("DiscordMessage");

                    b.Navigation("SavedByDiscordUser");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.FavouriteDiscordEmote", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordEmote", "DiscordEmote")
                        .WithMany()
                        .HasForeignKey("DiscordEmoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordEmote");

                    b.Navigation("DiscordUser");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlaceBoardHistory", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Fun.PlaceDiscordUser", "PlaceDiscordUser")
                        .WithMany()
                        .HasForeignKey("PlaceDiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETHBot.DataLayer.Data.Fun.PlaceBoardPixel", "PlaceBoard")
                        .WithMany()
                        .HasForeignKey("XPos", "YPos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceBoard");

                    b.Navigation("PlaceDiscordUser");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlaceDiscordUser", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Discord.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordUser");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlaceMultipixelJob", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Fun.PlaceDiscordUser", "PlaceDiscordUser")
                        .WithMany()
                        .HasForeignKey("PlaceDiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceDiscordUser");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Fun.PlaceMultipixelPacket", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Fun.PlaceMultipixelJob", "PlaceMultipixelJob")
                        .WithMany()
                        .HasForeignKey("PlaceMultipixelJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceMultipixelJob");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.RedditImage", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Reddit.RedditPost", "RedditPost")
                        .WithMany("RedditImages")
                        .HasForeignKey("RedditPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RedditPost");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.RedditPost", b =>
                {
                    b.HasOne("ETHBot.DataLayer.Data.Reddit.SubredditInfo", "SubredditInfo")
                        .WithMany("RedditPosts")
                        .HasForeignKey("SubredditInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubredditInfo");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.RedditPost", b =>
                {
                    b.Navigation("RedditImages");
                });

            modelBuilder.Entity("ETHBot.DataLayer.Data.Reddit.SubredditInfo", b =>
                {
                    b.Navigation("RedditPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
